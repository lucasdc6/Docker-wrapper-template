#!/bin/bash

PROG=`echo $0 | rev | cut -d/ -f1 | rev`

function show_help {
  cat <<HELP
Usage:

  Create a new process
      $PROG -n[NAME] [ -v VERSION] [ -p PORT ]
                      or
      $PROG --new[=NAME ] [ --version VERSION ] [ --port PORT ]

  List running process
      $PROG -l[NAME]
            or
      $PROG --list[= NAME ]

  Show status of a process
      $PROG -s[NAME] [ -v VERSION ]
                 or
      $PROG --status[=NAME ] [ --version VERSION ]

  Start a stopped process
      $PROG --start[=NAME] [ --version VERSION]

  Stop a running process
      $PROG --stop[=NAME] [ --version VERSION]

  Remove a process
      $PROG --remove[=NAME] [ --version VERSION ]

  Restart a running process
      $PROG --restart[=NAME] [ --version VERSION ]

HELP
  # Define extra_option to add info extra for the options
  [ -n "$(type -t extra_option)" ] && ( extra_option )

cat <<HELP
Default values:

  NAME: $NAME
  PORT: $PORT
  VERSION: $VERSION
HELP

  # Define extra_default_value to add extra values
  [ -n "$(type -t extra_default_value)" ] && ( extra_default_value )

  echo -e "\nWorking with $DOCKERNAME docker image"

  # Define extra_help to add info extra at the end of the basic help
  [ -n "$(type -t extra_help)" ] && ( extra_help )
}

if [ $# -eq 0 ] ; then
  show_help
  exit 0
fi

set -e

TEMP=`getopt -o n::s::r::l::v:p:c:h --long new::,status::,start::,stop::,restart::,remove::,list::,version:,port:,config:,help -n $PROG -- "$@"`
eval set -- "$TEMP"

function status_container {
  STATUS=`docker ps --filter name=$NAME-$VERSION --format {{.Status}}`
  if [ -n "$STATUS" ] ; then
    echo $NAME-$VERSION status:
    echo $STATUS
  else
    echo No such container: $NAME-$VERSION
  fi
}

function start_container {
  echo Starting $NAME-$VERSION
  docker start $NAME-$VERSION
}

function stop_container {
  echo Stoping $NAME-$VERSION
  docker stop $NAME-$VERSION
}

function restart_container {
  echo Restarting $NAME-$VERSION
  docker restart $NAME-$VERSION
}

function list_containers {
  echo -e "Running containers for $NAME\n"
  docker ps -a --filter name=$NAME --format "{{.Names}} ({{.Status}})"
}

function remove_container {
  stop_container
  echo -e "Removing $NAME-$VERSION"
  docker rm $NAME-$VERSION
}

while true ; do
  case "$1" in
    -c|--config)
        [ ! -r $2 -o ! -f $2 ] && ( echo "You must specify a FILE with READ permissions"; exit 1 )
        FILE=${2:-$FILE}
        shift 2 ;;
    -p|--port)
        [[ ! $2 =~ ^[0-9]+$ ]] && ( echo "You must specify a number"; exit 1)
        PORT=${2:-$PORT}
        shift 2
        ;;
    -v|--version)
        VERSION=${2:-$VERSION}
        shift 2 ;;
    -h|--help)
        show_help
        shift ;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

NAME=${2:-$NAME}

case $1 in
  new)
    [ -z "$(type -t new_container)" ] && ( echo "You need to define new_container"; exit 1 )
    new_container ;;
  status)
    status_container ;;
  start)
    start_container ;;
  stop)
    stop_container ;;
  restart)
    restart_container ;;
  remove)
    remove_container ;;
  list)
    list_containers ;;
esac
